name: Template Test

on:
  workflow_call:
    inputs:
      include-docker-build:
        description: 'Whether to include Docker image build'
        required: false
        default: false
        type: boolean
      include-tests:
        description: 'Whether to include test execution'
        required: false
        default: false
        type: boolean

jobs:
  template-test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        framework: [ 'net8.0', 'net9.0', 'net10.0' ]
        database: [ 'MySql', 'SqlServer', 'PostgreSQL' ]
        messagequeue: [ 'RabbitMQ', 'Kafka', 'RedisStreams', 'NATS' ]
    name: ${{ matrix.database }}-${{ matrix.messagequeue }}-${{ matrix.framework }}

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        global-json-file: global.json
        
    - name: Install template locally
      run: dotnet new install .
      
    - name: Generate project from template - ${{ matrix.database }}-${{ matrix.messagequeue }}-${{ matrix.framework }}
      run: |
        mkdir -p test-projects/${{ matrix.database }}-${{ matrix.messagequeue }}-${{ matrix.framework }}
        cd test-projects/${{ matrix.database }}-${{ matrix.messagequeue }}-${{ matrix.framework }}
        dotnet new netcorepal-web -n TestProject -F ${{ matrix.framework }} -D ${{ matrix.database }} -M ${{ matrix.messagequeue }}
        
    - name: Restore dependencies for generated project
      run: |
        cd test-projects/${{ matrix.database }}-${{ matrix.messagequeue }}-${{ matrix.framework }}/TestProject
        # Restore dependencies, but allow missing preview packages
        if ! dotnet restore --ignore-failed-sources; then
          echo "❌ RESTORE FAILED for ${{ matrix.database }}-${{ matrix.messagequeue }}-${{ matrix.framework }}"
          exit 1
        fi
        
    - name: Build generated project
      run: |
        cd test-projects/${{ matrix.database }}-${{ matrix.messagequeue }}-${{ matrix.framework }}/TestProject
        # Build the project - this must succeed
        if ! dotnet build --no-restore --configuration Release --verbosity minimal; then
          echo "❌ BUILD FAILED for ${{ matrix.database }}-${{ matrix.messagequeue }}-${{ matrix.framework }}"
          echo "Build logs:"
          dotnet build --no-restore --configuration Release --verbosity normal
          exit 1
        fi
        echo "✅ BUILD SUCCEEDED for ${{ matrix.database }}-${{ matrix.messagequeue }}-${{ matrix.framework }}"
        
    - name: Run tests for generated project
      if: ${{ inputs.include-tests }}
      run: |
        cd test-projects/${{ matrix.database }}-${{ matrix.messagequeue }}-${{ matrix.framework }}/TestProject
        # Run tests - this must succeed
        if ! dotnet test --no-build --configuration Release --verbosity normal; then
          echo "❌ TESTS FAILED for ${{ matrix.database }}-${{ matrix.messagequeue }}-${{ matrix.framework }}"
          exit 1
        fi  
        echo "✅ TESTS SUCCEEDED for ${{ matrix.database }}-${{ matrix.messagequeue }}-${{ matrix.framework }}"
        
    - name: Verify project structure and templates
      run: |
        cd test-projects/${{ matrix.database }}-${{ matrix.messagequeue }}-${{ matrix.framework }}/TestProject
        echo "Project structure verification:"
        ls -la src/
        echo "Framework verification in csproj:"
        grep -A 2 -B 2 "TargetFramework" src/TestProject.Web/TestProject.Web.csproj
        echo "Database packages verification:"
        grep -E "(SqlServer|MySql|PostgreSQL)" src/TestProject.Web/TestProject.Web.csproj || echo "Database packages found"
        echo "MQ packages verification:"
        grep -E "(RabbitMQ|Kafka|AzureServiceBus)" src/TestProject.Web/TestProject.Web.csproj || echo "MQ packages found"
        
    - name: Setup Docker Buildx
      if: ${{ inputs.include-docker-build }}
      uses: docker/setup-buildx-action@v3
      
    - name: Verify Dockerfile template substitution
      run: |
        cd test-projects/${{ matrix.database }}-${{ matrix.messagequeue }}-${{ matrix.framework }}/TestProject
        echo "Dockerfile framework verification:"
        grep -E "(aspnet|sdk):" src/TestProject.Web/Dockerfile
        
    - name: Build Docker image for generated project
      if: ${{ inputs.include-docker-build }}
      run: |
        cd test-projects/${{ matrix.database }}-${{ matrix.messagequeue }}-${{ matrix.framework }}/TestProject
        # Build Docker image - this must succeed for Docker tests
        CONFIG_NAME="${{ matrix.database }}-${{ matrix.messagequeue }}-${{ matrix.framework }}"
        IMAGE_TAG="testproject-$(echo "$CONFIG_NAME" | tr '[:upper:]' '[:lower:]'):latest"
        echo "Building Docker image with tag: $IMAGE_TAG"
        if ! docker build -f src/TestProject.Web/Dockerfile -t "$IMAGE_TAG" .; then
          echo "❌ DOCKER BUILD FAILED for $CONFIG_NAME"
          exit 1
        fi
        echo "✅ DOCKER BUILD SUCCEEDED for $CONFIG_NAME"
        
    - name: Uninstall template
      run: dotnet new uninstall .
      if: always()